
class _LOCAL(object): pass
local = _LOCAL()

def get_repositories():
    global local

    sw_packages = []
    sw_packages.append( Repository('nose', pypi='nose') )
    sw_packages.append( Repository('pyutilib', pyname='PyUtilib', root='https://software.sandia.gov/svn/public/pyutilib', dev=True) )
    sw_packages.append( Repository('coopr', pyname='Coopr', root='https://software.sandia.gov/svn/public/coopr', dev=True) )
    local.tevaspot = Repository('tevaspot', pyname='TevaSpot', root='https://software.sandia.gov/svn/teva/spot/spot', trunk='/packages/tevaspot', tag='/packages/tevaspot', dev=True)
    sw_packages.append( local.tevaspot )
    return sw_packages

default_w32dir = 'C:\\tevaspot'
default_unixdir = './tevaspot'

cmd_files = []
cmd_files.append('sp.cmd')
cmd_files.append('teva-spot.cmd')

install_dir = {}
install_dir['etc/mod'] = "/etc/mod"
install_dir['examples/simple'] = "/examples/simple"
install_dir['data/Net3'] = "/packages/test/data/Net3"
install_dir['data/test1'] = "/packages/test/data/test1"
install_dir['util'] = "/packages/tevaspot/util"
install_dir['doc'] = "/doc/pub"
install_dir['test'] = "/packages/test/pyunit"

def install_dirs(home_dir, options):
    global local
    pkgroot = local.tevaspot.pkgroot
    for dir in install_dir:
        if options.update:
            cmd = [Repository.svn,'update','-q',svnjoin(home_dir, dir)]
        else:
            if options.clear:
                rmtree( join(home_dir,dir) )
            cmd = [Repository.svn,'checkout','-q',svnjoin(pkgroot,install_dir[dir]),join(home_dir,dir)]
        print "Running command '%s'" % " ".join(cmd)
        call_subprocess(cmd, filter_stdout=filter_python_develop, show_stdout=True)
       
README="""
#
# Installation generated by the spot_install script.
#
# This directory is managed with virtualenv, which creates a
# virtual Python installation.  If the 'bin' directory is put in
# user's PATH environment, then the bin/python command can be used to
# employ SPOT without further installation.
#
# Directories:
#   admin      Administrative data for maintaining this distribution
#   bin        Scripts and executables
#   data       Test data
#   dist       Python packages that are not intended for development
#   doc        SPOT documentation and tutorials
#   examples   SPOT examples
#   include    Python header files
#   lib        Python libraries and installed packages
#   etc        Math programming model files used for optimization
#   src        Python packages whose source files can be
#              modified and used directly within this virtual Python
#              installation.
#   Scripts    Python bin directory (used on MS Windows)
#   test       Test directory
#   util       Utility scripts (including spot_install)
#
""" 

