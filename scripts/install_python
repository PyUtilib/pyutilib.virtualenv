#! /usr/bin/env python

import os
import os.path
from optparse import OptionParser
import sys
import re
import glob

vpykit_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

cwd = os.getcwd()

def call(str):
    str = str.replace('\\',os.sep)
    str = str.replace('/',os.sep)
    if str[0] == '.':
        str = cwd + os.sep + str
    currdir = os.getcwd()
    print >>OUTPUT, "Running command '%s' in directory '%s' " % (str,currdir)
    OUTPUT.flush()
    tmp = re.split('[ \t]+',str)
    try:
        import subprocess
        try:
            popen = subprocess.Popen(tmp, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
            return popen.communicate()[0], popen.returncode
        except OSError:
            tmp[0] += ".exe"
            popen = subprocess.Popen(tmp, stdout=subprocess.PIPE, stderr=subprocess.STDOUT).communicate()
            return popen.communicate()[0], popen.returncode
    except ImportError:
        if os.path.exists(tmp[0]+".exe"):
            tmp[0] += ".exe"
        cmd = " ".join(tmp)
        ans = os.system(cmd)
        return ans, 0

parser=OptionParser()
parser.add_option('-c', '--config',
    help='Configuration file',
    action='store',
    dest='config',
    default=None)
parser.add_option('-z', '--zip',
    help='ZIP file',
    action='store',
    dest='zip',
    default=None)
parser.add_option("--trunk",
    help="Specify a trunk installation",
    action="store_true",
    dest="trunk",
    default=False)
parser.add_option("--site-packages",
    help="Install using Python site packages",
    action="store_true",
    dest="site",
    default=False)
parser.add_option('-p',
    help='Specify a package directory that is installed',
    action='append',
    dest='packages',
    default=[])
parser.add_option("--src",
    help="Specify the root source directory ",
    action="store",
    dest="srcdir",
    default='.')
parser.add_option("--build",
    help="Specify the root build directory ",
    action="store",
    dest="builddir",
    default='.')
parser.add_option("--logfile",
    help="Specify the logfile",
    action="store",
    dest="logfile",
    default='python.log')
(options,args) = parser.parse_args()

OUTPUT=open(options.logfile,'w')

if os.path.exists(options.builddir + '/python'):
    print 'Python has already been installed at '+options.builddir + '/python'
    sys.exit(0)
else:
    print 'Installing Python at '+options.builddir + '/python ...',
    sys.stdout.flush()

if options.site:
    site_packages='--site-packages'
else:
    site_packages=''
if options.trunk:
    log,rc = call('%s/pyutilib.virtualenv/scripts/vpy_install %s --debug --trunk --config %s/default.ini %s/python' % (vpykit_dir, site_packages, vpykit_dir, options.builddir))
else:
    log,rc = call('%s/pyutilib.virtualenv/scripts/vpy_install %s --debug --offline --zip %s --config %s %s/python' % (vpykit_dir, site_packages, options.srcdir, options.srcdir, options.builddir, options.zip, options.config))
print >>OUTPUT, log
    
if rc == 0:
    for package in options.packages:
        dirname = package % options.srcdir
        for dir in glob.glob(dirname):
            cwd = os.getcwd()
            os.chdir(dir)
            print >>OUTPUT, '\nInstalling package at '+dir
            log,rc = call(options.builddir+'/python/bin/python setup.py develop')
            print >>OUTPUT, log
            call('rm -Rf build')
            os.chdir(cwd)
            if rc != 0:
                break

OUTPUT.close()
print 'done.'
if rc != 0:
    print 'ERROR: Problem installing Python.'
print 'See logfile: %s' % options.logfile
sys.exit(rc)
